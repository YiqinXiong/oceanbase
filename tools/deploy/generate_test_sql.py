import string
import random
import subprocess
import csv

# 连接obclient
OB_CLIENT_PATH="/data/2/xiongyiqin.xyq/workspace/oceanbase/deps/3rd/u01/obclient/bin/obclient"
OB_IP="127.0.0.1"
OB_PORT="43700"
OB_USER="root@mytpch"
OB_DB="xyq"
OB_ARGS="-f -c -A -vvv"
OB_CLIENT_CONN=f"{OB_CLIENT_PATH} -h {OB_IP} -P {OB_PORT} -u {OB_USER} -D {OB_DB} {OB_ARGS}"


# 插入数据
ROW_COUNT=1000000
DICT_N=10
RLE_N=10
CONST_N=10
RLE_DUPLICATE_N=10

MARK_0=0.05
MARK_1=0.25
MARK_2=0.5
MARK_3=0.75

def write_to_csv(rows):
    # 打开 CSV 文件并写入数据
    with open('result.csv', 'w', newline='') as csv_file:
        # 创建 CSV writer 对象
        writer = csv.writer(csv_file)
        # 写入数据行
        writer.writerows(rows)

def get_random_string(length):
    """
    生成随机的长度为length的字符串，包含空格、大小写字母和数字
    """
    # 定义字符串的取值范围（包括空格、大小写字母和数字）
    letters = string.ascii_letters + string.digits + '-'
    # 使用 random.choices() 方法从字符串的取值范围中随机选择字符，生成一个长度为length的列表
    random_list = random.choices(letters, k=length)
    # 将列表中的字符连接成字符串，返回生成的随机字符串
    rand_str = ''.join(random_list)
    return rand_str

def get_random_bool():
    """
    有固定99%的概率返回True，固定1%的概率返回False
    """
    random_num = random.random()  # 生成一个0到1之间的随机数
    if random_num < 0.99:
        return True
    else:
        return False


bigint_dict = [100000 * x for x in range(DICT_N)]
int_dict = [1000 * x for x in range(DICT_N)]
char_dict = [get_random_string(8) for x in range(DICT_N)]
varchar_dict = [get_random_string(random.randint(3, 33)) for x in range(DICT_N)]
bigint_rle = [100000 * x for x in range(RLE_N)]
int_rle = [1000 * x for x in range(RLE_N)]
char_rle = [get_random_string(8) for x in range(RLE_N)]
varchar_rle = [get_random_string(random.randint(3, 33)) for x in range(RLE_N)]


RAW_NO_200 = {
    'bigint': [(int(1e18)+1+x) for x in range(500)],
    'int': [(int(-1e9)-1-x) for x in range(500)],
    'char': [("@"+get_random_string(6)+"#") for x in range(500)],
    'varchar': [("@"+get_random_string(random.randint(1, 31))+"#") for x in range(500)],
}

RAW_ALL_200 = {
    'bigint': [-311795297041535804,-398304872518693486,-415377367579177008,-231014600641155932,-415317419092682920,-93293641037261564,-648264281234474732,740688565829812013,297888911964543118,436105631281298868,78381380568552058,188247359992646244,-11477806956718321,-994459966859539699,-765137739212149916,858242730427993170,-845050725159143734,-358166393509044090,-410548932906172604,542283165416397357,-890335120793758725,63594475268799859,-850058434682387758,314934993803745445,-449715778452482344,954965294188952628,-26844447327711258,904481588103985675,342896684959489304,-333734110228966885,-713958148609626787,568373077046359311,-904233352982086339,228207919653429930,290174167895035426,328541989067872232,6522836356813008,961165933501931638,-661193495819776422,-934691363405386502,-127183269506877963,-411959790873778783,322427578610262739,10297863073625278,-486388530228287500,609336415106531310,628035227400167693,-501740585218631736,-943586282876511057,837785928663482405,340296620859453277,-759867524071228024,-748568172758371590,998336864498249738,-897025417050708604,614239120377482377,-6665366434842557,-577167791959507318,-165513026061864386,965113969217201630,904177414230308635,-235402393309386327,-812282267035730372,-320144521438242289,265766224614668816,-720454059277150326,930657947837517911,531465761657876307,261656997577858895,819388916072789316,934769363519448238,906679321477614325,-126819408076737137,-614502607391399406,-714959476110953608,-836307521502907724,508701795539065454,938382956479176891,-644672660498806500,-17308638773760090,177970314064536211,69089153403885288,-795485350910325245,-282170362711752011,397897389896250099,105712182011843199,972846142735595618,821416742555691700,946995244978742148,-937735176538841867,-446676118717555887,62097979599639742,-967226828903483989,-9567642168838281,-557964294143075960,-561637566552153546,698403490196307010,853586139659669468,702881805806959614,-807854829339231142,956138106169328866,757047766121388020,686617661173271455,400212836910494528,-809378657924399232,782903748791494922,-550179896094286983,-753395044227212144,217703907660922285,-241177731891534579,27166853999917897,48902604328741358,-221324167850950149,-170723232395454969,971988596654225183,808674534258171053,-809471779250343070,-19531415528008918,-227588724575552065,-243250702036355887,-498671021726320740,-438506006364689182,199225427096477946,-388051777191054584,772967902546121393,-81965458894194343,-482115718739933158,968010999704347954,-10361605153963096,-443580387337125966,-76928880481159670,-942858986205469913,114620376205755686,-102372120907688543,-69284979664389696,-733444175021662134,821503569849166949,-655678703985975639,-354338942490668736,459096831782174495,221525606061760875,617135715029431993,-804032804685658240,-24438422762441877,682866324813019341,-438812063165631157,442995809333443263,390161275691094764,472369000950578389,207368488212765838,-133564847722642730,-682237929434378790,-394507919204946535,-222079793472208787,-880589475807544975,392164600355735613,-417181411073088631,527766295992024691,134982490215554029,-528998520207231481,655855627653624561,-131265009444919877,-924612482980580945,568723540027838747,82261980548106367,-489302194330727585,947336081376435221,663839041861343722,262441279872624806,-180609731521766351,815520602372936143,-254626197918882718,-208955996516940554,533332766291734267,-866363287625590391,965819744092739564,731727068306952760,-197352780519643370,346652274399621556,680282398860956550,857869924493342092,-30601680191493901,-801017889331236127,-808708059950307665,673084651807690446,859059580274862779,995367081622696412,-489302915087266551,941073607792619063,-725208663999498518,-145065629311305420,86544864630658398,280659837572840564,154140657529240493,-849957774899081118,106932474658677958,-5699723208252506,825550701514109601,-458483099790443338,559133363268173490],
    'int': [-98234401,-153429912,-505734920,927932735,-179653533,336831572,198213900,-405940550,102655255,-781120511,679530111,-720968100,-111105927,787168068,-275793852,453943964,-16090841,711263317,278215467,257363608,-27072559,193248100,-481611044,-995318864,351037596,750806073,-915384752,-993733725,418092704,-185095769,-460446501,-655180245,980902291,-490588039,-915678225,-881352688,418412803,-718508388,938773366,67153942,-149761414,-575468061,-843485768,419657234,925990881,872417130,459594888,146437284,885588911,-116695414,508089082,244040637,662964416,-517480113,-331750016,669531325,273943696,-458684647,-145974371,-699893923,-23958455,-250504102,745669014,659067066,384214122,-33411694,-706559524,-479284736,205057564,-891603298,372311110,658368693,-507834672,886938415,-688650883,882205802,-500955099,611895391,719105945,-411489880,424997449,136257623,-860775910,-226909621,-318714487,950907230,631443811,49809911,862491978,-398878834,400414369,36145563,-254057696,478348963,-530470321,729836752,-720946501,690533676,201012830,-569753802,83420096,407428180,-303688338,438182710,-537978760,269916864,-988821966,-950879997,632504983,66590633,-595061323,242027357,914706813,684400627,742350357,-518061189,281247951,-327488746,187302195,797515758,219258052,-715333125,-679195099,41623242,-125424274,-507539086,459075852,-622742600,118968840,749708352,633863836,85431883,-750416137,17794946,-258247807,-576329660,197121385,135557842,-281602376,-417489294,619918802,622665181,515671198,-206378708,474323563,-931601268,593528775,-6536712,430831595,213514790,-689731456,165048334,154590751,90774811,-214470341,437919586,972972192,965371356,-823365180,682832718,207906600,249258227,556763388,-512948049,398793168,-270514041,-988014555,-762982228,543462915,-896882731,-312341949,-914288481,-291270186,11805580,985446602,-142801564,425614428,-430923142,802248116,-463741305,340626234,44598670,740509449,746699170,-262320031,-497995360,-681416879,699659444,607242152,-97906748,-934041352,-729367255,-613357122,964345804,479069698,-527039573,974913084,-997053617,31821285,-844585428],
    'char': ["K2ClzME3","OLQH6MQ-","lrHeHkk9","Trw57cns","M-X3Wmhy","Oy0pwHQT","n1y3THLc","kSvRXlz1","rwoZMiZW","6p0LL28N","tbLbPLYP","FCKYBKsa","Ijt7AdLj","KZ7i4p1M","k4cumWuZ","m8CxcNKj","NIxC59qu","odIzQ67Y","LfXSPjzm","9rbkyuxX","jpjMSx1h","pFYI-08f","jG11ZjEC","jrqUNOhR","egl4607v","l5-qIat0","s9ndvdC3","jITxLxb9","CvqvLGsh","N-lL1iFw","kPttWUdi","Ns-NNAQd","DOaNurMh","x-yns3IB","8EuViKWc","WCzXmwjh","4OQlof8C","xFBf6T74","QNETXpuX","hvwRrSQi","pZE8s7ux","F9s9Vrql","RN2lSqLA","tyBPKw8g","UFUsLHzn","kKMvA0Sx","naJfpy6o","xs8N7qY2","wJF0ZCPS","aPXk552y","s4u5yCGL","UJETZAaq","TdDSNZst","XwT26BoW","TNFOb8jZ","MwvADLYf","Z5xcrF-i","v-naYL-P","E8S6w7eX","vKYpOirB","LcX7twt4","WSlXOzXZ","Knf9667H","XaPFcxdn","RkNyzx6J","1mmZ8eWR","onl1RMJS","xTc9TN7B","bPumDDai","-olqa1xv","0pmR8on8","BqadLdFA","IzEeIHFm","YDxEmchG","EoLm79Ru","wJ2PU-KG","eg3lNANX","-1h1edfz","Z6xnC5Vs","mXbvzGCo","PkT2NADc","bkzDOFaU","nAHlYIuH","dlNAMLf6","jEeUf7IF","ULJXqY8y","sjBcqc9q","gNqiQVER","nWsaMmv7","NgmSXCbG","Gomvd6dq","VarclsI2","6RHOkT47","A4m5YMDf","Qh8OkSPc","hGCKeTQ3","YoDaIZ5s","WSN-ZwDY","GGGqEbVr","QCHAvGPp","OA5O9-KZ","A2XuzZYv","QaeRJf99","4hqAKBW3","5eiMBRV1","hROZWYNH","ECZd1Czx","FnbuiY-q","6UUliGXw","VAg-v9k3","Hxb7q07s","G9iLZcVl","k4KRkCDJ","Iq3WWrwV","vo6qqv4f","29O2WIvi","-fyYpDsm","OtvMkdni","0AafHdze","0wVLjG4u","sXvhHGy9","08xYb5Bw","Sy0l15w7","e-vnUUmJ","Fn5luZ5A","VchTkp5S","AmMiL-u7","T7AIuvO7","eQB-epLX","25IOMDK7","Sspx0kLf","4rI05-ew","56KZSTZv","hr82AsAZ","MHNjvsbf","6nQcqCot","9P5fkfuY","FTquVkwp","DvvtAb0l","N03Smsox","eDzIJUOg","Bkr6fCoG","Mj88Jjj5","1gbb1XPu","aVYWXtnh","KGkzgJ8P","mffaiOKC","yCUJi9II","lKgURxwa","5nzpTm-K","XQFbAAzX","MC7kRzYY","CrzEywTQ","oreR7-Nj","yCAhpz3i","o6BSbP-6","Ie-3pX6t","eTjZwNW6","P85VMWVy","rTpJWzH0","RGvSu5B6","tMk4UoFk","Dg1XCrPN","4Fl6ikoY","-QXKvyX2","4SZSL5xG","kGeTwj42","UoeVThLv","qpbtiEd5","P7lxCXjs","Boo4mQHU","KVuKonnA","QIdbC27u","PYfV-t7I","gDHoZ-gd","Zazb1F-P","d6nE-J5V","6f-Qgg65","2X9NdxgL","eSUJv9pL","Co5o6G3I","QloXsrdu","ybPhM7a8","0HsjnDc2","Zw4LHtYt","qiKw3x-W","H3alFagS","wTpxlEyQ","CdzY7xi9","AwxztPlD","iavFcsQN","211RvPsL","IJXo4uQ3","zbmrThBj","ZW-5cMSo","wbAcHG8t","1MnR-u9i","CVIWsu7T","yYNX0U75","AXwVFOjG"],
    'varchar': ["7pr","mTa5FKhTfMq--iMxmS7o5l","DIHPLCu1bBZG","co41WdnEGdvpHwkoAefDyCub","NpzqJAmgXdRkiwMJv1q","uWGVWDhsdSvUZXb6GA","aEPwp9QzrCTrFVTb-Lf0-66","FzXjlMos86oSGG3IWrvrlHnua","Nri7EF40EdH3TpBpIunReQVrbvtNUj","08h879SHPS","DELo49","lAuIAOm","0iDQQnJn","WhW8BTdr","BJHQrLnXQcWtq0oBuZRXIQwaLhyig","HS9NYcrJ0CtZQGLih-zU-CdP3","bnT4TEpm-dOwsC","VTWFaD4cHAYL78O","l8xUJkXxj9WYxa3NXROBBxGTQzqYzi2qH","KnXvL1zkSASFIzrSUB","7UHShuQBJrllOpIQdl-Z","AnERTRnO7GoBqujmMqvHv0gvMwmpvRsg","OkPB13T-2FE0zMEnM-B29S","vRHtovRL4LIYsgWD23Fz3Lja1BN","DC6BHX5n9UY2ppQi0Vx6","yBQxLf9pF6X6A4edCnjIB7pek","grJN0Hb7lXXlcKFBOwNDBqbbKTil","7XouJZoYkZnBPw","r18A0ouRpY","eyJp6Iv","6TmNQ5Pr-oQ16axghUZ6JC4","bUyJR58XAXLHjz1gkqM5pEt-C54Xk","Ok96xqmzf27kroRatFnId2J4","lBtJH2","eBYNyTlSgLaGHyVan9HDh","LV0supjQh1SIK0Fid7wMtyoSS","94ktg5NVdfIErLroCjmHg7bvqUr9Vz4","w3aru6xfMZPyNtBQOv3S","6DQ1QYUqDBbJm","ntzu","W5Ia-BlWa94YEyCGW39","WsPIgKCt7U-PSSWLFmZYEwiyy","5m3D7oEMl","ePcDGQ-bnuV873mpbK6h","WILtc7hCenCawGdX1ALv3cwfgJP2","X06eHBLexl3f3whEC3hmmWOZ8w5Qem","H8acBrmxKLnFt1EeoDllTyBCmNDtxq","jDlKLqooTGmgfLS2","ORSPE7Xj","EjAwdXJUROpp6T28mcnb8V1BJBvi9GB","IKfPKdnQ","bBQfHcay3AF-DkQQk63aCZw","THxvhaFutG","22zIqlBk1JFlp","lsMz0-cawQGOPGcKiNxcddutvJeUyWOw","HGb5fHfsjea","wSKewVRxsulNI","LipxvitZqWGlRNar4BSa","AJPAK","Kz2M8eJdpKWoinzDrzr","AeiX","x7hTjCJAK5IhSFvQV6","KypGSfpfVn0VzbKISHCyA8PJOxeIri3z","WH-CTAX5AYRVAEpPc1bH","JP3A4Ev","CG2aMFbnv3Dbwx","eur3kxWyoZnaAIyAyXTNj","tgbdY8Shju-5IAG","KMCg7","HlxE-jT1mSstyo3n5PMkakY","ZwTwy7l8","iy9QU0dcpK58v9yNamR","l5a6cSJ1Xh2k8nLQPz2spJfWtr5wcgoZn","hz92t5MZVNXT3iBKJWAWk146","T7SjN3fNjkvstNYS","kfHOqKshTTWOw0xBu","CvR","Bhivoq-z0ML","YzI3tmVuQ-qBzk7kiR0","2M87ACikPygLr","0HpOsDPVv6","MW04","pl-TOK5aIV","LnTJe","dNSyt2bjmGP3u6X-1EfErE","8VVugf53HCmYbbilov1Lt","519iM5CjS","U7rBEukMkm9","V1tEP4","hIQAEmS0lHk3SLqIDmqO2Lu8","IVq1Jv3F9","nZCPTSqDWa4snQMfQK9S","hNFWL0wmw","Ab7h1YnxJE4QOlIu5lhV0","YqchnNa","woR8gGxJPQVGO4xbvDNTJP","4SEl4qonF7Ln0A0mG6","ddOZaZLkgHNGi4RTQD0","5dUNk97TDhq8","c4Nzz7Fh","Dj06YtX5ZAWFs5UeKxHcC","Vr-8jxBwnmLXSmS4ydw4Iz","MZC3eMQy4LonTCns0Fk27p-","TD8da-zxLC2k0GGt6yLYBuPtCzC","OrhVUW","S0jISceMUN","42bpTudJF-ddnV89iTbwAhAIKuM","gCsvSloUWsVoJVYUsgJDI","sth0YlF-YI3yDbTHCOQZoWM18V-OBEW","6Ammx2nGfGoVahU-CAPyA4O8Diw","hE8y4RfSoRIcsbuRoZuuSsd","o9tyf6PlWFT","h21bC3ls0W1uRASge80Lt1","KHtytr7lh1dRoxnymeJnyCb","56HD4ZVglXmQf","Qb7ZIQj9BfZtugIviUqztO0NeFuT","BWdgDitxGHmdlRJC","zLppgsoJFtxmVOQU","-EC","M2Dddu0mgmuYzhlA52","loMZGO1Um8FzKOsPClGTPPz3T","jd-qI","OnaMjGV5paUYyxYvwLm6hNB8","vOrwCl3wrDqZufEzyTkxOBmdzBYiZ8PZ","KeJZIA","0rxlAPDaAZ4SpqUSt","bGGiZgXyDbq4J","df2vRtY0Q60x0","IfNN-O","RzVeSveSHNY","nqvR-1o","t1gGcT9t90twn","NIadVJuAGStbcniLx0jg-","UOJsarvVBS6SMBbJ3zJSdwVe8PRyU","nQk1","S0Gm","JG9e6S6yqCLOyxDNSp","kOqL2XCCNgtfjdNLKBt2oMgeeTZLStQ","tfp2YqakqH2oXN7QpaKAL","qSN0oHrXLrnEWsLyg","ZpO9lnVFWYvdQQEX3VL5CWBU","daB-DsD81kpYvzu4wCG4amk235P","tg9MKq2","rOOsmSPfSlMx","vRI2rinpuO5wHTB4YkqLHjiTz8MDFE7Kp","SM3pSLbldVs","V1UnGIQowl2EjN04x0","dydfB43ca","JOR3ehwpZH4","oMMDJR","qJDG--1dElu4fP5cXqgeF1K9uso","kOWHBOcriciE-h","iLarDQYPgoFk591UUNJ","iVoyCE","IGTVydTBfF6DgxtuGXLTobPDYDrisneZr","ByJ28x","rQdhbyNxbXxnDG8Uy9d","3Kw0ps","bASyxcIbOmW6tVKCMhf9Gpo","Y-YAuk-7CBpvh3fXHNJl4","SofY0m75nNevpa8oA0sFJNrZu8ZXpxM","uL6nSVggJsDQnnx4gl","gBhx","bYxLHo","IGO0KGOkuLk0M3aROwdVrPHVMaEL","4DJJZ8O33vstUsFAs6","a4tqeqD","xli24bP","UrLVW1Yhg","XoRqWrLq","IcHZo0teznytbmLLtqM1tcPFIi0wO","U5yxRu","oWT3SxYPM8f6jyoN5po","JF2","E9N1FLRx0dBKly-Zty-QhK3N","C0rcwagoibwhAPbsdmBakXVCXgqFwwb9","DX9TovIiJP1E6mJ3zo","kl6lkSXl719J","TjYMvsVzKepiwuqVgN5QohZRgMUo","iJrcLLwmls5aUX","d5SgPsc-ETcm86TT8nqw","ve9bISL","kvo0Dhb5","2Md","9pkmr9spV78XMHPucoWG","VRjsxibW99HEBCgFMCuD10im8g0ZpSSQ","XpXTTs5n8ugj8wRF6SxLUHOEYk2OLDcZ","xFyPMWGmtF","5VYLVH0cudrHrOdDjzElm6Tg","gjHoO5FeoRk6L6","i6iwQcXRdKu5--","JhXvUE","iD9","s0-JXhkU","S40-vBSEa6u5JA5w8fqim-aYiionHRTNi","pvMu","SdZQjHiW4zEmAkPaYNtgkJu5","Fjo8e","wCkCUK0BfDkjiOhQcq4","tqHoFUAEBBVHv9MmTAF726"],
}

RAW_PART_200 = {
    'bigint': RAW_ALL_200['bigint'] + RAW_NO_200['bigint'],
    'int': RAW_ALL_200['int'] + RAW_NO_200['int'],
    'char': RAW_ALL_200['char'] + RAW_NO_200['char'],
    'varchar': RAW_ALL_200['varchar'][100:] + RAW_NO_200['varchar'],
}

DICT_NO_200 = {
    'bigint': [(-2000000000 + x + 1) for x in range(500)],
    'int': [(500 + x + 1) for x in range(500)],
    'char': [("@"+get_random_string(6)+"#") for x in range(500)],
    'varchar': [("@"+get_random_string(random.randint(1, 31))+"#") for x in range(500)],
}

DICT_PART_200 = {
    'bigint': [(-2000000000 + x) for x in bigint_dict] + DICT_NO_200['bigint'],
    'int': [(500 + x) for x in int_dict] + DICT_NO_200['int'],
    'char': ["TNwy4zpJ","ulzZVii1","KDnwp8ok","sSvxkmRo","Uy3b4V4f","KRyNGdF5","OZb1mlX3","Dmg7IILB","ayGgKqfe","8bJfTYwY"] + DICT_NO_200['char'],
    'varchar': ["AZh-rizTSkPl","6egdGz5t8dGOsRLqyvMkl6sP","sbyo3NL9","Rd0B8sNFe9cfAMEGugLSZoqZfBax","vPjUYBE3WCy8UZM79mKT3CwTBCYUJIzr","-mKSFR1DelgqwZqTz0lYBnc","xogT3wocOPpL4HXHK-s","6rDSe3XN8A5reKezgDwbxUUe","VdlstnB8wYcRBXKlbADPJqsNbQPRWxkv","VYYrMXAZXjQ11fu6sDjX-XenAaOwN"] + DICT_NO_200['varchar'],
}

DICT_FAST_NO_200 = {
    'bigint': [(-2000000000 - x - 1) for x in range(500)],
    'int': [(500 - x - 1) for x in range(500)],
    'char': [("####"+get_random_string(4)) for x in range(500)],
    'varchar': [("####"+get_random_string(random.randint(1, 31))) for x in range(500)],
}

RLE_NO_200 = {
    'bigint': [(10000000 + x + 1) for x in range(500)],
    'int': [(-5 + x + 1) for x in range(500)],
    'char': [("@"+get_random_string(6)+"#") for x in range(500)],
    'varchar': [("@"+get_random_string(random.randint(1, 31))+"#") for x in range(500)],
}

RLE_PART_200 = {
    'bigint': [(10000000 + x) for x in bigint_rle] + RLE_NO_200['bigint'],
    'int': [(-5 + x) for x in int_rle] + RLE_NO_200['int'],
    'char': ["qFfOheGp","723GYCPY","5mWvWnJa","Gr2TUedu","DfwlNc7U","yuGfrBx2","EYhh4AOP","yOQpdp9F","aSUsDFuw","eeiyI1f8"] + RLE_NO_200['char'],
    'varchar': ["Mf0Iq6BvCY8CwPzYAqE2j","HUguRVa1HRioc4HVC2zrGF7iUG-","2krXyowxhaZkSYb4TIg1lVjiLXxbAGo","82R1Khr","BEcxbLUv-nI5GXNvKRWTNPm367SgrzOXT","WthRm7ZgT02CHyZjKgVIRN","DnAoGQXw1X7OBCT7nEY7XE","sM3EDkaFCPzPk7NOvx17Ld4nV","UPu8QPaTtj91LjXAQ","1xZAAdo9VJlHe"]+RLE_NO_200['varchar'],
}

RLE_FAST_NO_200 = {
    'bigint': [(10000000 - x - 1) for x in range(500)],
    'int': [(-5 - x - 1) for x in range(500)],
    'char': [("~~~~"+get_random_string(4)) for x in range(500)],
    'varchar': [("~~~~"+get_random_string(random.randint(1, 31))) for x in range(500)],
}

CONST_NO_200 = {
    'bigint': [22222222] + [(11111111 - x - 1) for x in range(499)],
    'int': [3333] + [(2222 - x - 1) for x in range(499)],
    'char': [("@"+get_random_string(6)+"#") for x in range(500)],
    'varchar': [("@"+get_random_string(random.randint(1, 31))+"#") for x in range(500)],
}

CONST_PART_200 = {
    'bigint': [(-2000000000 + x) for x in range(DICT_N)] + CONST_NO_200['bigint'],
    'int': [(500 + x) for x in range(DICT_N)] + CONST_NO_200['int'],
    'char': ["TNwy4zpJ","ulzZVii1","KDnwp8ok","sSvxkmRo","Uy3b4V4f","KRyNGdF5","OZb1mlX3","Dmg7IILB","ayGgKqfe","8bJfTYwY"] + CONST_NO_200['char'],
    'varchar': ["AZh-rizTSkPl","6egdGz5t8dGOsRLqyvMkl6sP","sbyo3NL9","Rd0B8sNFe9cfAMEGugLSZoqZfBax","vPjUYBE3WCy8UZM79mKT3CwTBCYUJIzr","-mKSFR1DelgqwZqTz0lYBnc","xogT3wocOPpL4HXHK-s","6rDSe3XN8A5reKezgDwbxUUe","VdlstnB8wYcRBXKlbADPJqsNbQPRWxkv","VYYrMXAZXjQ11fu6sDjX-XenAaOwN"] + CONST_NO_200['varchar'],
}

CONST_PART_200_CONST_IN = {
    'bigint': [11111111] + CONST_NO_200['bigint'][1:],
    'int': [2222] + CONST_NO_200['int'][1:],
    'char': ["lth-1234"] + CONST_NO_200['char'][1:],
    'varchar': ["tinghua-22223333-你好——我是庭华"] + CONST_NO_200['varchar'][1:],
}

CONST_FAST_NO_200 = {
    'bigint': [(11111111 - x - 1) for x in range(500)],
    'int': [(2222 - x - 1) for x in range(500)],
    'char': [("~~~~"+get_random_string(4)) for x in range(500)],
    'varchar': [("~~~~"+get_random_string(random.randint(1, 31))) for x in range(500)],
}

INT_BASE_DIFF_NO_200 = {
    'bigint': [(2000000000 + x + 1) for x in range(500)],
    'int': [(10000 + x + 1) for x in range(500)],
}

INT_BASE_DIFF_PART_200 = {
    'bigint': [1000000008,1000001567,1000000330,999995978,1000002170,999998386,1000002670,1000003072,999996256,1000003902,999996067,999999269,999995294,1000001198,1000003994,1000001649,999995124,999995758,999997053,1000001786,1000001431,999995690,999998513,999997785,1000003190,1000001004,999996444,999996782,999998142,999999701,1000000480,999995861,1000000827,999996114,1000001450,999997521,999999061,999998766,999999154,1000003400,999998144,999997058,1000003083,1000003056,1000002031,1000004946,999996322,1000002721,999998075,1000000032,1000002837,1000004973,1000004796,1000001865,1000000343,1000004063,999996156,999995720,999999626,999995408,1000002499,999999060,999996380,999996525,999998595,1000003028,1000001454,999996946,1000002878,1000002577,999997569,1000000515,999998781,1000001033,999997205,999996665,1000001738,1000003623,1000000903,999998240,1000001907,1000000407,999998126,1000003816,1000003154,999998654,1000002258,999997903,999996412,1000004431,1000003913,999995594,999996131,999995352,999996938,1000002304,999997034,1000000272,1000001011,999997659,1000002639,1000003867,1000001201,1000004366,999998961,999995695,999996828,999998733,999995448,999996481,999999934,1000003166,1000000334,999999713,1000000721,999995209,1000000606,999999557,999995562,1000000562,1000003103,1000004712,999999442,999999382,1000003565,999997227,999999467,999997446,999997288,999995991,1000004563,1000004411,1000003587,1000001457,1000004260,1000000775,999996860,1000003329,1000000540,999999553,999999833,1000004040,999995816,999998627,999998263,999998163,1000004813,999995773,999997919,1000000128,1000001680,999995856,999995174,999999013,999999727,999997805,999996557,999996247,1000001800,999996894,999997494,999995864,1000003590,999995098,1000000042,999996123,1000004357,1000001156,999998140,999995407,1000004288,1000002200,1000003124,999997296,999997329,1000002511,1000001958,1000004142,999999750,999998016,999998376,999995533,999995453,999997771,999995087,1000000857,999996239,1000001397,1000001578,1000001762,1000002056,1000002238,999999163,1000001137,999998442,1000001437,999998381,1000000294,999998495,1000000399] + INT_BASE_DIFF_NO_200['bigint'],
    'int': [1919,-4337,4102,1111,-2864,3529,1631,-462,3887,-2170,-906,1416,-2303,-3863,488,2649,2829,2896,-3896,-18,1524,-4013,-4991,-2872,1545,-1576,3143,-3993,4588,-2571,-3600,631,-1477,-4759,1081,3525,2092,-1968,-4375,742,3787,-306,604,-5031,1300,3406,4216,-1020,611,-5153,-3625,1204,-4322,-2203,1849,-4929,-709,-502,2450,1985,2108,-2883,-2810,-3918,412,2716,-170,2430,-3856,1949,-379,4228,2771,-2508,3637,-2049,3732,343,-3463,3801,1699,4536,4429,2158,2067,-314,1758,4412,563,847,-4383,3856,-4510,1917,-4021,3687,-4779,-2611,1072,-511,-2563,2007,4088,4370,-3952,-3235,1969,794,-3041,4140,-2230,4327,-1499,-2249,-1503,-1177,2964,2814,3692,-1873,-3476,3373,-1180,-1684,-1023,1024,-796,4381,-1276,-2108,2196,-455,-4207,2110,-3678,-3506,-1186,1389,-1192,-4452,4592,-4012,3569,1525,-345,3223,-4534,-3474,2726,-666,2370,3448,3731,-1756,1412,1343,360,-864,-451,3510,2904,-1213,3517,2347,-14,1719,-5057,-3822,199,-4723,822,1581,1324,-1651,1579,-4649,-184,-1041,-2816,825,2420,523,-3336,1176,-4663,3802,-4233,3892,-604,-1481,-819,-1695,-1243,-1847,3054,4316,989,48,-4623,-1495] + INT_BASE_DIFF_NO_200['int'],
}

INT_BASE_DIFF_FAST_NO_200 = {
    'bigint': [(-2000000000 - x - 1) for x in range(500)],
    'int': [(-10000 - x - 1) for x in range(500)],
}

encoding_case_map = {
    'RAW': [RAW_NO_200, RAW_PART_200, RAW_ALL_200],
    'DICT': [DICT_NO_200, DICT_PART_200, DICT_FAST_NO_200],
    'RLE': [RLE_NO_200, RLE_PART_200, RLE_FAST_NO_200],
    'CONST': [CONST_NO_200, CONST_PART_200, CONST_PART_200_CONST_IN, CONST_FAST_NO_200],
    'INT_BASE_DIFF': [INT_BASE_DIFF_NO_200, INT_BASE_DIFF_PART_200, INT_BASE_DIFF_FAST_NO_200],
}

encoding_prefix_map = {
    'RAW': "raw_",
    'DICT': "d_",
    'RLE': "r_",
    'CONST': "c_",
    'INT_BASE_DIFF': "i_",
}

encoding_value_num_map = {
    'RAW': 200,
    'DICT': DICT_N,
    'RLE': RLE_N,
    'CONST': DICT_N + 1,
    'INT_BASE_DIFF': 200,
}


def get_sql_from_map(encoding='RAW', params_num=200):
    ret = []
    if params_num < 2 or params_num > 200:
        print("INVALID ARGUMENT", params_num)
        return ret
    if encoding not in encoding_case_map.keys():
        print("INVALID ARGUMENT", encoding)
        return ret
    case_list = encoding_case_map[encoding]
    prefix = encoding_prefix_map[encoding]
    for each_case in case_list:
        case_sqls = []
        for d_type,v_list in each_case.items():
            str = f"select * from tinghua where {prefix+d_type} in {tuple(v_list[:params_num])};"
            case_sqls.append(str)
        ret.append(case_sqls)
    return ret


if __name__ == "__main__":
    encodings = ["RAW", "DICT", "RLE", "CONST", "INT_BASE_DIFF"]
    param_nums = [4, 400]
    # param_nums=[2]
    my_rows = []

    for e in encodings:
        case_list = encoding_case_map[e]
        prefix = encoding_prefix_map[e]
        print("\n======== encoding =", e, "========")
        for pn in param_nums:
            print("==== params number =", pn, "====")
            my_rows.append([f'# {e}: in <{pn}> objs'])
            my_rows.append(['bigint', 'int', 'char', 'varchar'])
            for each_case in case_list:
                case_row = []
                for d_type,v_list in each_case.items():
                    valid_value_num = min(encoding_value_num_map[e]//2, pn//2)
                    query = f"select count({prefix+d_type}) from tinghua where {prefix+d_type} in {tuple(v_list[:(valid_value_num)]+v_list[-(pn-valid_value_num):])};"
                    print(query)
                    cmd = f'echo "{query}" | {OB_CLIENT_CONN} | grep "sec)" '
                    cmd += "| awk '{match($0, /[0-9]+\.[0-9]+/); print substr($0, RSTART, RLENGTH)}'"
                    result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    res_str = result.stdout.decode('utf-8')
                    case_row.append(float(res_str.strip()))
                    print(res_str)
                    # 如果命令执行出错，则打印错误信息
                    if result.returncode != 0:
                        print(result.stderr.decode('utf-8'))
                my_rows.append(case_row)
            my_rows.append(['#'])
    write_to_csv(my_rows)
